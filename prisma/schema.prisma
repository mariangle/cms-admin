// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards     Billboard[]      @relation("StoreToBillboard")
  categories     Category[]       @relation("StoreToCategory")
  products       Product[]        @relation("StoreToProduct")
  sizes          Size[]           @relation("StoreToSize")
  colors         Color[]          @relation("StoreToColor")
  brands         Brand[]          @relation("StoreToBrand")
  storage        Storage[]        @relation("StoreToStorage")
  condition      Condition[]      @relation("StoreToCondition")
  orders         Order[]          @relation("StoreToOrder")
  ProductVariant ProductVariant[] @relation("StoreToVariant")
}

model Billboard {
  id        String   @id @default(uuid())
  storeId   String
  label     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id          String   @id @default(uuid())
  storeId     String // Foreign Key to Store
  billboardId String // Foreign Key to Billboard
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products  Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String   @id @default(uuid())
  storeId     String // Foreign Key to Store
  categoryId  String // Foreign Key to Category
  brandId     String? // Foreign Key to Brand
  name        String
  description String
  isFeatured  Boolean  @default(false)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store           Store            @relation("StoreToProduct", fields: [storeId], references: [id])
  category        Category         @relation("CategoryToProduct", fields: [categoryId], references: [id])
  brand           Brand?           @relation(fields: [brandId], references: [id])
  productVariants ProductVariant[] @relation("ProductToVariant")

  @@index([storeId])
  @@index([categoryId])
  @@index([brandId])
}

model ProductVariant {
  id          String   @id @default(uuid())
  price       Decimal
  storeId     String // Foreign Key to Store
  productId   String // Foreign key to Product
  sizeId      String? // Foreign Key to Size
  colorId     String? // Foreign Key to Color
  storageId   String? // Foreign Key to Storage
  conditionId String? // Foreign Key to Condition
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store     Store      @relation("StoreToVariant", fields: [storeId], references: [id])
  product   Product    @relation("ProductToVariant", fields: [productId], references: [id])
  size      Size?      @relation(fields: [sizeId], references: [id])
  color     Color?     @relation(fields: [colorId], references: [id])
  storage   Storage?   @relation(fields: [storageId], references: [id])
  condition Condition? @relation(fields: [conditionId], references: [id])

  images     Image[] // Relation to Image model
  orderItems OrderItem[] // Relation to Order model
  brandId    String?

  @@index([storeId])
  @@index([productId])
  @@index([sizeId])
  @@index([colorId])
  @@index([storageId])
  @@index([conditionId])
}

model Order {
  id        String   @id @default(uuid())
  storeId   String // Foreign Key to Store
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String @id @default(uuid())
  orderId   String // Foreign Key to Order
  productId String // Foreign Key to Product

  order   Order          @relation(fields: [orderId], references: [id])
  product ProductVariant @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String   @id @default(uuid())
  storeId   String // Foreign Key to Store
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store            @relation("StoreToSize", fields: [storeId], references: [id])
  products ProductVariant[] // Relation to Product model

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  storeId   String // Foreign Key to Store
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store            @relation("StoreToColor", fields: [storeId], references: [id])
  products ProductVariant[] // Relation to Product model

  @@index([storeId])
}

model Storage {
  id        String   @id @default(uuid())
  storeId   String // Foreign Key to Store
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store    Store            @relation("StoreToStorage", fields: [storeId], references: [id])
  products ProductVariant[] // Relation to Product model

  @@index([storeId])
}

model Condition {
  id          String   @id @default(uuid())
  storeId     String // Foreign Key to Store
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store    Store            @relation("StoreToCondition", fields: [storeId], references: [id])
  products ProductVariant[] // Relation to Product model

  @@index([storeId])
}

model Brand {
  id        String   @id @default(uuid())
  storeId   String // Foreign Key to Store
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store     @relation("StoreToBrand", fields: [storeId], references: [id])
  Product Product[]

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product ProductVariant @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}
